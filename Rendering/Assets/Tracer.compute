// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#define PI 3.1415926535

struct Ray
{
    float3 direction;
    float3 origin;
    float3 energy;
};

struct RayHit
{
    float3 position;
    float3 normal;
    float distance;
};


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
Texture2D<float4> Skybox;
SamplerState sampler_Skybox;    //must be similar in name to the texture so unity knows which texture to bind the sampler to
float4x4 CameraToWorld;
float4x4 WorldToCamera;
float4x4 CameraInverseProjection;

//returns theta, phi
float2 CartesianToSpherical(float3 ray)
{
    float theta = acos(ray.y) / -PI;
    float phi = atan2(ray.x , -ray.z) / -PI * 0.5f;
    return float2(theta, phi);
}

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = 1.f;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    Ray ray;
    //a ray from world space origin into view space 
    float3 or = mul(float4(0, 0, 0, 1), WorldToCamera).xyz;
    //a ray from view (clip space) to camera space
    float3 dir = mul(float4(uv, 0, 1), CameraInverseProjection).xyz;
    //convert direction from camera space to world space
    dir = normalize(mul(float4(dir, 0), WorldToCamera).xyz);
    ray = CreateRay(or, dir);
    return ray;
}

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.f, 0.f, 0.f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.f, 0.f, 0.f);
    return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    //assume that the plane we're intersecting is right underneath us 
    float t = -ray.origin.y / ray.direction.y;

    if(t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = (t * ray.direction) + ray.origin;
        bestHit.normal = float3(0.f, 1.f, 0.f);   //the ground plane has a normal pointing straight up
    }
}

//take in a ray, and sphere position, with w component being the width
void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere)
{
    float3 toOrigin = ray.origin - sphere.xyz; //from the sphere to the origin


    //a ray can intersect with sphere at entrance AND exit (2 points)
    float p1 = -dot(ray.direction, toOrigin);
    float p2sqr = p1 * p1 - dot(toOrigin, toOrigin) + sphere.w * sphere.w;

    if (p2sqr < 0)
        return;

    float p2 = sqrt(p2sqr);
    // return the first collision either entrance (if it exists), or exit (if no entrance)
    float t = p1 - p2 > 0? p1 - p2 : p1 + p2;

    if(t> 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + (ray.direction * t);
        bestHit.normal = normalize(bestHit.position - sphere.xyz);
    }
    
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    //IntersectGroundPlane(ray, bestHit);
    IntersectSphere(ray, bestHit, float4(0, 1, 3, 0.5f));
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    float3 col = float3(0, 0, 0);
    
    if (hit.distance < 1.#INF)
    {
        float3 specular = float3(0.6f, 0.6f, 0.6f);     //specular elements for R G and B channels
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= specular;

        return float3(0.f, 0.f, 0.f);       //our objects have no albedo
        //return hit.normal * 0.5f + 0.5f;
    }
    
       //we didn't hit anything, return the skybox
    
    float2 sph = CartesianToSpherical(ray.direction);
    col = Skybox.SampleLevel(sampler_Skybox, float2(sph.y, sph.x), 0).rgb * ray.energy;
    ray.energy = 0.f;
    return col;
    

    
}




[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float2 dim;
    Result.GetDimensions(dim.x, dim.y);
    //screen UV spanning [-1, 1]
    //we first add 0.5, 0.5 to shift sample to the middle of the pixel
    float2 sUV = float2((id.xy + float2(0.5f, 0.5f)) / dim.xy) * 2.0f - 1.0f;
    Ray r = CreateCameraRay(sUV);
    float4 res;
    float3 col = float3(0, 0, 0);

    for (int a =0; a<8; a++)
    {
        RayHit rh = Trace(r);
        float3 c = Shade(r, rh);
        col += c;
        //break;
        
        if (!any(r.energy))
            break;
    }
    res = float4(col, 1.f);
    
    
    
    Result[id.xy] = res;
    //Result[id.xy] = float4(r.direction * 0.5f + 0.5f, 1);
}
