// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#define PI 3.1415926535
static const float EPSILON = 1e-8;

struct Ray
{
    float3 direction;
    float3 origin;
    float3 energy;
};

struct RayHit
{
    float3 position;
    float3 normal;
    float3 albedo;
    float3 specular;
    float3 emission;
    float distance;
    bool inside;
};

struct Sphere
{
    float4 position;
    float3 specular;
    float3 albedo;
    float3 emission;
    float refractiveIndex;
};


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
Texture2D<float4> Skybox;
SamplerState sampler_Skybox;    //must be similar in name to the texture so unity knows which texture to bind the sampler to

float4x4 CameraToWorld;
float4x4 WorldToCamera;
float4x4 CameraInverseProjection;
float4 CameraPosition;
StructuredBuffer<Sphere> Spheres;
uint SphereCount;

float4 light;
float4 _Pixel;  //current pixel xy, zw is the offset
float _Seed;


//returns theta, phi
float2 CartesianToSpherical(float3 ray)
{
    float theta = acos(ray.y) / -PI;
    float phi = atan2(ray.x , -ray.z) / -PI * 0.5f;
    return float2(theta, phi);
}

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.f, 1.f, 1.f);
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    Ray ray;
    //a ray from world space origin into view space 
    float3 or = mul(float4(CameraPosition.xyz, 1), WorldToCamera).xyz;
    //a ray from view (clip space) to camera space
    float3 dir = mul(float4(uv, 0, 1), CameraInverseProjection).xyz;
    //convert direction from camera space to world space
    dir = normalize(mul(float4(dir, 0), WorldToCamera).xyz);
    ray = CreateRay(or, dir);
    return ray;
}

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.f, 0.f, 0.f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.f, 0.f, 0.f);
    hit.albedo = float3(0.f, 0.f, 0.f);
    hit.specular = float3(0.f, 0.f, 0.f);
    hit.emission = float3(0.f, 0.f, 0.f);
    hit.inside = false;
    return hit;
}

float rand()
{
    float result = frac(sin(_Seed / 100.f * dot(_Pixel.xy, float2(12.9898f, 78.233f))) * 43758.5453f);
    _Seed += 1.0f;
    return result;
}

float sdot(float3 v1, float3 v2, float f = 1.)
{
    return saturate(dot(v1, v2) * f);
}

float energy(float3 color)
{
    return dot(color, 1.f / 3.f);
}

float3x3 GetTangentSpace(float3 normal)
{
    float3 helper = float3(1, 0, 0); 
    if (abs(normal.x) > 0.99f)    //use x aligned vector as our helper, but fallback to y aligned if our normal is too close to x axis
        helper = float3(0, 0, 1);

    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));

    return float3x3(tangent, binormal, normal);
}


float3 SampleHemisphere(float3 normal, float alpha)
{
    float cosTheta = pow(rand(), 1.f / (alpha + 1.f));
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
    float phi = 2 * PI * rand();    //pick a random phi angle on the x-z plane
    float3 cartesianSpace = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

    return mul(cartesianSpace, GetTangentSpace(normal));
    
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    //assume that the plane we're intersecting is right underneath us 
    float t = -ray.origin.y / ray.direction.y;

    if(t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = (t * ray.direction) + ray.origin;
        bestHit.normal = float3(0.f, 1.f, 0.f);   //the ground plane has a normal pointing straight up
        bestHit.albedo = 0.5f;
        bestHit.specular = 0.8f;
        bestHit.emission = 0.f;
    }
}

void IntersectQuad(Ray ray, inout RayHit bestHit)
{
    
}

//The Tomas Akenine-Moller and Ben Trumbone 1997 fast triangle intersection algorithm
//https://fileadmin.cs.lth.se/cs/Personal/Tomas_Akenine-Moller/pubs/raytri_tam.pdf
//out params: t - how far along ray.direction we hit the triangle
//          u, v, w are barycentrinc coords where w = 1 - u - v
//barycentric equation for a point on a triangle is P = wA + uB + vC, where ABC are the vertices
bool IntersectTriangle(Ray ray, float3 vert0, float3 vert1, float3 vert2, inout float t, inout float u, inout float v)
{
    //find vectors that share the same vertex (v0)
    float3 edge1 = vert1 - vert0;
    float3 edge2 = vert2 - vert0;

    //calculate the determinant
    float3 pvec = cross(ray.direction, edge2);
    //when our deterimant is 0, the ray is parallel to the triangle,
    //eg. lies in the same plane 
    float det = dot(edge1, pvec);

    //backface culling
    if(det < EPSILON)
        return false;
    

    float inv_det = 1.f / det;
    //distance from ray origin to vertex 0
    float3 tvec = ray.origin - vert0;
    u = dot(tvec, pvec) * inv_det;
    if (u< 0.f || u > 1.f)
        return false;

    float3 qvec = cross(tvec, edge1);

    v = dot(ray.direction, qvec) * inv_det;
    if(v < 0.f || u + v > 1.f)
        return false;

    t = dot(edge2, qvec) * inv_det;
    return true;
}

//take in a ray, and sphere position, with w component being the width
void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    float3 toOrigin = ray.origin - sphere.position.xyz; //from the sphere to the origin


    //a ray can intersect with sphere at entrance AND exit (2 points)
    float p1 = -dot(ray.direction, toOrigin);
    float p2sqr = p1 * p1 - dot(toOrigin, toOrigin) + sphere.position.w * sphere.position.w;

    if (p2sqr < 0)
        return;

    float p2 = sqrt(p2sqr);
    // return the first collision either entrance (if it exists), or exit (if no entrance)
    //when p1 is negative, we are within the sphere
    float t = p1 - p2 > 0? p1 - p2 : p1 + p2;

    if(t> 0 && t < bestHit.distance)
    {
        float refractChance = rand() < 0.1f? -1.f : 1.f;
        bestHit.distance = t;
        bestHit.position = ray.origin + (ray.direction * t);
        bestHit.inside = p1 < 0.f;
        //bestHit.normal = normalize(bestHit.position - sphere.position.xyz) * bestHit.inside? -1.f * refractChance : 1.f;
        bestHit.normal = normalize(bestHit.position - sphere.position.xyz);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
        bestHit.emission = sphere.emission;
    }
    
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    float3 v0 = float3(-5, 0, -5);
    float3 v1 = float3(5, 0, -5);
    float3 v2 = float3(0, 5 * sqrt(2), -5);

    float t, u, v;

    
    
    IntersectGroundPlane(ray, bestHit);
    
    for(int a =0; a< SphereCount; a++)
    {
        IntersectSphere(ray, bestHit, Spheres[a]);
    }

    if(IntersectTriangle(ray, v0, v1, v2, t, u, v))
    {
        if(t > 0 && t < bestHit.distance)
        {
            bestHit.distance = t;
            bestHit.position = ray.origin + ray.direction * t;
            bestHit.normal = normalize(cross(v1 - v0, v2 - v0));
            bestHit.albedo = 0.1f;
            bestHit.specular = 0.65f * float3(1.f, 0.4f, 0.2f);
            bestHit.emission = 0.f;
        }
    }
    
 //   IntersectSphere(ray, bestHit, float4(0, 0.5, 2.5, 0.5f));
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    float3 col = float3(0, 0, 0);
    
    if (hit.distance < 1.#INF)
    {

        ray.origin = hit.position + hit.normal * 0.001f;
        
        
        //Lambert Model
        //ray.energy *= 2 * hit.albedo * sdot(ray.direction, hit.normal);
        //return 0.f;

        //Phong Model
        float3 reflected = reflect(ray.direction, hit.normal);
        //float3 diffuse = 2 * min(1.f - hit.specular, hit.albedo);
        //float alpha = 15.f;
        
        hit.albedo = min(1.f - hit.specular, hit.albedo);
        float specChance = energy(hit.specular);
        float diffChance = energy(hit.albedo);

        float roulette = rand();

        //specular
        if(roulette < specChance)
        {
            float alpha = 2000.f; //higher powers mean our pow function converges around the reflected ray in sample hemisphere
            float f = (alpha + 2) / (alpha + 1);
            ray.direction = SampleHemisphere(reflected, alpha); //we still use importance sampling but around our reflected ray and with tight constraint
            ray.energy *= (1.f / specChance) * hit.specular * sdot(hit.normal, ray.direction, f);   //we propegate importance sampling into the energy so more likely reflections are weighed more
            //ray.direction = reflected;
            //ray.energy *= (1.f / specChance) * hit.specular * sdot(hit.normal, ray.direction);
        }
        //diffuse
        else if(diffChance > 0 && roulette < specChance + diffChance)
        {
            ray.direction = SampleHemisphere(hit.normal, 1.f); //we use importance sampling 
            ray.energy *= (1.f / diffChance) * hit.albedo; //we remove our sdot function because sample hemisphere already takesinto account contribution
        }
        else
        {
            ray.energy = 0.f;
        }
        return hit.emission;
        
        //return saturate(dot(hit.normal, light.xyz) * -1) * light.w * lightCol;
        
        //return float3(0.f, 0.f, 0.f) * ray.energy;       //our objects have no albedo
        //return hit.normal * 0.5f + 0.5f;
    }
    else
    {
        ray.energy = 0.f;
        //we didn't hit anything, return the skybox
        
        float2 sph = CartesianToSpherical(ray.direction);
        col = Skybox.SampleLevel(sampler_Skybox, float2(sph.y, sph.x), 0).rgb;
        
        return col;
    }
    
    
}




[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float2 dim;
    //uint2 SphereCount;
    Result.GetDimensions(dim.x, dim.y);
    //screen UV spanning [-1, 1]
    //we first add 0.5, 0.5 to shift sample to the middle of the pixel
    float2 sUV = float2((id.xy + float2(_Pixel.z, _Pixel.w)) / dim.xy) * 2.0f - 1.0f;
    Ray r = CreateCameraRay(sUV);
    float3 col = float3(0.f, 0.f, 0.f);
    _Pixel.xy = id.xy;
    //Spheres.GetDimensions(SphereCount.x, SphereCount.y); //Metal does not querying buffer sizes
    
    for (int a =0; a<8; a++)
    {
        RayHit rh = Trace(r);
        col += Shade(r, rh) * r.energy; //important that we get ray energy before we call shade
        
        
        if (!any(r.energy))
            break;
    }
    
    
    
    Result[id.xy] = float4(col, 1);
    //Result[id.xy] = float4(r.direction * 0.5f + 0.5f, 1);
}
